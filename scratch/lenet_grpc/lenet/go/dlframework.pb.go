// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dlframework.proto

package dlframework

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request message containing image to be predicted on
type DlRequest struct {
	Image                *string  `protobuf:"bytes,1,req,name=image" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DlRequest) Reset()         { *m = DlRequest{} }
func (m *DlRequest) String() string { return proto.CompactTextString(m) }
func (*DlRequest) ProtoMessage()    {}
func (*DlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dlframework_ed234c3b6b2c5056, []int{0}
}
func (m *DlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DlRequest.Unmarshal(m, b)
}
func (m *DlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DlRequest.Marshal(b, m, deterministic)
}
func (dst *DlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DlRequest.Merge(dst, src)
}
func (m *DlRequest) XXX_Size() int {
	return xxx_messageInfo_DlRequest.Size(m)
}
func (m *DlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DlRequest proto.InternalMessageInfo

func (m *DlRequest) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

// Response message containing prediction of the image sent
type DlReply struct {
	Prediction           *string  `protobuf:"bytes,1,req,name=prediction" json:"prediction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DlReply) Reset()         { *m = DlReply{} }
func (m *DlReply) String() string { return proto.CompactTextString(m) }
func (*DlReply) ProtoMessage()    {}
func (*DlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_dlframework_ed234c3b6b2c5056, []int{1}
}
func (m *DlReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DlReply.Unmarshal(m, b)
}
func (m *DlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DlReply.Marshal(b, m, deterministic)
}
func (dst *DlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DlReply.Merge(dst, src)
}
func (m *DlReply) XXX_Size() int {
	return xxx_messageInfo_DlReply.Size(m)
}
func (m *DlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DlReply.DiscardUnknown(m)
}

var xxx_messageInfo_DlReply proto.InternalMessageInfo

func (m *DlReply) GetPrediction() string {
	if m != nil && m.Prediction != nil {
		return *m.Prediction
	}
	return ""
}

func init() {
	proto.RegisterType((*DlRequest)(nil), "dlframework.DlRequest")
	proto.RegisterType((*DlReply)(nil), "dlframework.DlReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DlframeworkClient is the client API for Dlframework service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DlframeworkClient interface {
	// Predict class for an image
	Predict(ctx context.Context, in *DlRequest, opts ...grpc.CallOption) (*DlReply, error)
}

type dlframeworkClient struct {
	cc *grpc.ClientConn
}

func NewDlframeworkClient(cc *grpc.ClientConn) DlframeworkClient {
	return &dlframeworkClient{cc}
}

func (c *dlframeworkClient) Predict(ctx context.Context, in *DlRequest, opts ...grpc.CallOption) (*DlReply, error) {
	out := new(DlReply)
	err := c.cc.Invoke(ctx, "/dlframework.Dlframework/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DlframeworkServer is the server API for Dlframework service.
type DlframeworkServer interface {
	// Predict class for an image
	Predict(context.Context, *DlRequest) (*DlReply, error)
}

func RegisterDlframeworkServer(s *grpc.Server, srv DlframeworkServer) {
	s.RegisterService(&_Dlframework_serviceDesc, srv)
}

func _Dlframework_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DlframeworkServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dlframework.Dlframework/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DlframeworkServer).Predict(ctx, req.(*DlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dlframework_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dlframework.Dlframework",
	HandlerType: (*DlframeworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Dlframework_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dlframework.proto",
}

func init() { proto.RegisterFile("dlframework.proto", fileDescriptor_dlframework_ed234c3b6b2c5056) }

var fileDescriptor_dlframework_ed234c3b6b2c5056 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xc9, 0x49, 0x2b,
	0x4a, 0xcc, 0x4d, 0x2d, 0xcf, 0x2f, 0xca, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0x92, 0xe2, 0xe2, 0x74, 0xc9, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2,
	0xe5, 0x62, 0xcd, 0xcc, 0x4d, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd2, 0xe0, 0x54, 0x92, 0xe5,
	0x62, 0x07, 0xc9, 0x15, 0xe4, 0x54, 0x0a, 0x09, 0x71, 0x71, 0x15, 0x14, 0xa5, 0xa6, 0x64, 0x26,
	0x97, 0x64, 0xe6, 0xe7, 0x41, 0xa4, 0x8d, 0x3c, 0xb8, 0xb8, 0x5d, 0x10, 0x26, 0x09, 0x59, 0x72,
	0xb1, 0x07, 0x40, 0x94, 0x08, 0x89, 0xe9, 0x21, 0xdb, 0x0a, 0x37, 0x5f, 0x4a, 0x04, 0x43, 0xbc,
	0x20, 0xa7, 0x52, 0x89, 0xc1, 0x49, 0x8f, 0x4b, 0x26, 0x33, 0x5f, 0x2f, 0xbd, 0xa8, 0x20, 0x59,
	0x2f, 0xb5, 0x22, 0x31, 0xb7, 0x20, 0x27, 0xb5, 0x18, 0x59, 0xa5, 0x13, 0x8f, 0x4b, 0x8e, 0x1b,
	0x88, 0x13, 0x00, 0x72, 0x7f, 0x00, 0x23, 0x20, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x28, 0xcb, 0xf5,
	0xd5, 0x00, 0x00, 0x00,
}
