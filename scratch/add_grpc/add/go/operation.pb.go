// Code generated by protoc-gen-go. DO NOT EDIT.
// source: operation.proto

package operation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing numbers to be operated on
type OpRequest struct {
	A                    *int32   `protobuf:"varint,1,req,name=a" json:"a,omitempty"`
	B                    *int32   `protobuf:"varint,2,req,name=b" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpRequest) Reset()         { *m = OpRequest{} }
func (m *OpRequest) String() string { return proto.CompactTextString(m) }
func (*OpRequest) ProtoMessage()    {}
func (*OpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_operation_e23e57d39bd11df7, []int{0}
}
func (m *OpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpRequest.Unmarshal(m, b)
}
func (m *OpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpRequest.Marshal(b, m, deterministic)
}
func (dst *OpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpRequest.Merge(dst, src)
}
func (m *OpRequest) XXX_Size() int {
	return xxx_messageInfo_OpRequest.Size(m)
}
func (m *OpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpRequest proto.InternalMessageInfo

func (m *OpRequest) GetA() int32 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

func (m *OpRequest) GetB() int32 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

type OpReply struct {
	C                    *int32   `protobuf:"varint,1,opt,name=c" json:"c,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpReply) Reset()         { *m = OpReply{} }
func (m *OpReply) String() string { return proto.CompactTextString(m) }
func (*OpReply) ProtoMessage()    {}
func (*OpReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_operation_e23e57d39bd11df7, []int{1}
}
func (m *OpReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpReply.Unmarshal(m, b)
}
func (m *OpReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpReply.Marshal(b, m, deterministic)
}
func (dst *OpReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpReply.Merge(dst, src)
}
func (m *OpReply) XXX_Size() int {
	return xxx_messageInfo_OpReply.Size(m)
}
func (m *OpReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OpReply.DiscardUnknown(m)
}

var xxx_messageInfo_OpReply proto.InternalMessageInfo

func (m *OpReply) GetC() int32 {
	if m != nil && m.C != nil {
		return *m.C
	}
	return 0
}

func init() {
	proto.RegisterType((*OpRequest)(nil), "operation.OpRequest")
	proto.RegisterType((*OpReply)(nil), "operation.OpReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OperationClient is the client API for Operation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperationClient interface {
	// Adds two numbers
	Add(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpReply, error)
}

type operationClient struct {
	cc *grpc.ClientConn
}

func NewOperationClient(cc *grpc.ClientConn) OperationClient {
	return &operationClient{cc}
}

func (c *operationClient) Add(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpReply, error) {
	out := new(OpReply)
	err := c.cc.Invoke(ctx, "/operation.Operation/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationServer is the server API for Operation service.
type OperationServer interface {
	// Adds two numbers
	Add(context.Context, *OpRequest) (*OpReply, error)
}

func RegisterOperationServer(s *grpc.Server, srv OperationServer) {
	s.RegisterService(&_Operation_serviceDesc, srv)
}

func _Operation_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operation.Operation/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationServer).Add(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Operation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "operation.Operation",
	HandlerType: (*OperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Operation_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operation.proto",
}

func init() { proto.RegisterFile("operation.proto", fileDescriptor_operation_e23e57d39bd11df7) }

var fileDescriptor_operation_e23e57d39bd11df7 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x2f, 0x48, 0x2d,
	0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x29, 0x72, 0x71, 0xfa, 0x17, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x71, 0x72, 0x31,
	0x26, 0x4a, 0x30, 0x2a, 0x30, 0x69, 0xb0, 0x82, 0x98, 0x49, 0x12, 0x4c, 0x20, 0xa6, 0x92, 0x08,
	0x17, 0x3b, 0x48, 0x49, 0x41, 0x4e, 0x25, 0x48, 0x34, 0x59, 0x82, 0x51, 0x81, 0x51, 0x83, 0xd5,
	0xc8, 0x0e, 0xa4, 0x11, 0x6a, 0x8a, 0x90, 0x21, 0x17, 0xb3, 0x63, 0x4a, 0x8a, 0x90, 0x88, 0x1e,
	0xc2, 0x26, 0xb8, 0xa9, 0x52, 0x42, 0x68, 0xa2, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x4e, 0xea, 0x5c,
	0x52, 0x99, 0xf9, 0x7a, 0xe9, 0x45, 0x05, 0xc9, 0x7a, 0xa9, 0x15, 0x89, 0xb9, 0x05, 0x39, 0xa9,
	0xc5, 0x08, 0x75, 0x4e, 0xec, 0xfe, 0x05, 0x01, 0x20, 0xa7, 0x06, 0x30, 0x02, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x72, 0x93, 0xfc, 0x81, 0xbe, 0x00, 0x00, 0x00,
}
